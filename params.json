{
  "name": "Gulp-organiser",
  "tagline": "A module to organise your gulp tasks",
  "body": "## API\r\n### Gulpfile functions\r\n``` javascript\r\n/**\r\n * Registers the directory where gulp task registrations are\r\n * and provides the paths to be used in each task.\r\n * @param {String} tasksDir\r\n * @param {Object} paths\r\n * @return {Object} a task config object\r\n */\r\nregisterAll(tasksDir, paths)\r\n```\r\n\r\n### Tasks functions\r\n``` javascript\r\n/**\r\n * Registers a gulp task. To be called in task file\r\n * @param {Function} registrationFunc - receives two objects as arguments: (task, allTaks)\r\n */\r\nregister(registrationFunc)\r\n\r\n\r\n/**\r\n * Tasks like `watch` or `build` may want to require other tasks.\r\n * Loads all tasks from a path into an array of task configurations\r\n * @param {String} folderPath\r\n * @return {Array<Object>} task configs\r\n */\r\nloadFrom(folderPath)\r\n```\r\n\r\n## Example\r\n### Gulpfile\r\n``` javascript\r\n// List all available tasks\r\nconst organiser = require('gulp-organiser');\r\n// Paths are relative to project root.\r\nconst rootSrc = './example/example-resources/src';\r\nconst rootDest = './example/example-resources/dest';\r\n// Tasks folder is relative to gulpfile.\r\nconst tasksFolder = './tasks';\r\n\r\norganiser.registerAll(tasksFolder, {\r\n  // Each object is key is a task.\r\n  // Each task must have either an  'src' or a 'dest' key\r\n  'sass': {\r\n    // Tasks may have subtasks. Just add keys with an 'src' or 'dest' property.\r\n    // If a task has subtasks, it is executed by 'gulp maintask:subtask'\r\n    // or just 'gulp maintask', which executes all subtasks.\r\n    'main': {\r\n      'src': rootSrc + '/sass/main.scss',\r\n      'dest': rootDest + '/sass',\r\n    },\r\n    'secondary': {\r\n      'src': rootSrc + '/sass/secondary.scss',\r\n      'dest': rootDest + '/sass',\r\n    }\r\n\t},\r\n\t'copy-static': {\r\n\t\t'src':  rootSrc + '/static/**',\r\n\t\t'dest': rootDest + '/static/',\r\n\r\n    // Tasks may have arbitrary keys which will be passed to the task\r\n\t\t'map': {\r\n\t\t\t '/example-resources/src/js/**.json': rootDest + 'js'\r\n\t\t}\r\n\t},\r\n  // Tasks may ommit either 'src' or 'dest'.\r\n\t'link-dependencies': {\r\n\t\t'dest': rootDest + '/dependencies',\r\n\t}\r\n});\r\n```\r\n\r\n### Task\r\n#### SASS\r\nThis is how a sass task could look like:\r\n\r\n``` javascript\r\nconst gulp = require('gulp');\r\nconst sass = require('gulp-sass');\r\nconst postcss = require('gulp-postcss');\r\nconst autoprefixer = require('autoprefixer');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst organiser = require('gulp-organiser');\r\n\r\n// Register the task. The task name is equal to its file name.\r\n// You must export the call to the `register` function just like here.\r\nmodule.exports = organiser.register((task) => {\r\n  gulp.task(task.name, () => {\r\n    gulp.src(task.src) // The content of the 'src' key was set in the Gulpfile.\r\n    .pipe(sourcemaps.init())\r\n    .pipe(sass().on('error', sass.logError))\r\n    .pipe(postcss([autoprefixer({ browsers: ['last 15 versions'] })]))\r\n    .pipe(sourcemaps.write('.'))\r\n    .pipe(gulp.dest(task.dest)); // And so was the content of 'dest'\r\n  });\r\n});\r\n```\r\n#### Watch\r\nYou can use `loadFrom` to include your watch tasks, so that you don't have\r\nto name them, and thus can just add and remove files without hastle.\r\n\r\n``` javascript\r\nconst gulp = require('gulp');\r\nconst organiser = require('gulp-organiser');\r\n\r\nmodule.exports = organiser.register((task) => {\r\n  const watchTasks = organiser.loadFrom(`./${task.name}`);\r\n  const watchTaskNames = watchTasks.map(t => t.name);\r\n  gulp.task(task.name, watchTaskNames);\r\n});\r\n```\r\n\r\n## License\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Marcelo Lazaroni - Lazamar\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}